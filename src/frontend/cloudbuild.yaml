steps:
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build Backend Image'
    args: [ 'build', '-t', '$(params.REGION)-docker.pkg.dev/$(params.PROJECT)/meta-ad-studio-rep./src/backend:latest', './src/backend' ]

  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build Frontend Image'
    args: [ 'build', '-t', '$(params.REGION)-docker.pkg.dev/$(params.PROJECT)/meta-ad-studio-rep./src/frontend:latest', './src/frontend' ]

  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push Backend Image'
    args: [ 'push', '$(params.REGION)-docker.pkg.dev/$(params.PROJECT)/meta-ad-studio-rep./src/backend:latest' ]

  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push Frontend Image'
    args: [ 'push', '$(params.REGION)-docker.pkg.dev/$(params.PROJECT)/meta-ad-studio-rep./src/frontend:latest' ]

  # Run DB migrations using the backend image (assumes prisma migrate deploy is configured)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Run Migrations'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "Running migrations..."
        # Use Cloud Run Job or run a one-off Cloud Run service; simplest approach: run a Cloud Run job (beta)
        gcloud run jobs create meta-ad-migrations --image=$(params.REGION)-docker.pkg.dev/$(params.PROJECT)/meta-ad-studio-rep./src/backend:latest --region=$(params.REGION) --command "npx" --args "prisma,migrate,deploy" || true
        gcloud run jobs execute meta-ad-migrations --region=$(params.REGION) || true

  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Deploy Backend'
    args:
      - 'run'
      - 'deploy'
      - 'meta-ad-studio-backend'
      - '--image'
      - '$(params.REGION)-docker.pkg.dev/$(params.PROJECT)/meta-ad-studio-rep./src/backend:latest'
      - '--region'
      - '$(params.REGION)'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--set-secrets'
      - 'DATABASE_URL=DATABASE_URL:latest,JWT_SECRET=JWT_SECRET:latest,GEMINI_API_KEY=GEMINI_API_KEY:latest'

  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Deploy Frontend'
    args:
      - 'run'
      - 'deploy'
      - 'meta-ad-studio-frontend'
      - '--image'
      - '$(params.REGION)-docker.pkg.dev/$(params.PROJECT)/meta-ad-studio-rep./src/frontend:latest'
      - '--region'
      - '$(params.REGION)'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'

options:
  substitution_option: ALLOW_LOOSE

substitutions:
  _REGION: 'us-central1'
  _PROJECT: ''

timeout: '1200s'
substitutions:
  _REGION: "us-central1" # Default region, can be overridden by triggers

steps:
# Build and push the unified image to the regional Artifact Registry
- name: 'gcr.io/kaniko-project/executor:latest'
  id: 'Build and Push Image'
  args:
    - --dockerfile=./terraform/docker/Dockerfile
    - --context=.
    - --destination=${_REGION}-docker.pkg.dev/meta-ad-studio/ad-studio-app-repo/app:latest
    - --cache=true
    - --cache-ttl=24h

# Get GKE credentials for the target regional cluster
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: 'Get GKE Credentials'
  entrypoint: gcloud
  args:
    - 'container'
    - 'clusters'
    - 'get-credentials'
    - 'staging-gke-cluster-${_REGION}' # Assumes a cluster naming convention
    - '--region=${_REGION}'
    - '--project=meta-ad-studio'

# Install Trivy for security scanning
- name: 'alpine'
  id: 'Install Trivy'
  entrypoint: 'sh'
  args:
  - '-c'
  - |
    apk add --no-cache curl
    curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

# Scan the regional image with Trivy
- name: 'aquasec/trivy'
  id: 'Scan Image'
  args: ['image', '--exit-code', '1', '--severity', 'HIGH,CRITICAL', '${_REGION}-docker.pkg.dev/meta-ad-studio/ad-studio-app-repo/app:latest']
  waitFor:
    - 'Build and Push Image'

# Run OPA compliance checks
- name: 'openpolicyagent/opa'
  id: 'OPA Compliance Check'
  args:
    - 'exec'
    - '--decision'
    - 'kubernetes/admission/deny'
    - '--bundle'
    - 'compliance/'
    - 'k8s/'

# Apply Kubernetes manifests to the regional cluster
- name: 'gcr.io/cloud-builders/kubectl'
  id: 'Deploy to GKE'
  args: ['apply', '-f', 'k8s/']
  env:
  - 'CLOUDSDK_COMPUTE_REGION=${_REGION}'
  - 'CLOUDSDK_CONTAINER_CLUSTER=staging-gke-cluster-${_REGION}'
  waitFor:
    - 'Get GKE Credentials'
    - 'Scan Image' # Ensure deployment happens only after a successful scan

images:
- '${_REGION}-docker.pkg.dev/meta-ad-studio/ad-studio-app-repo/app:latest'

options:
  logging: CLOUD_LOGGING_ONLY
