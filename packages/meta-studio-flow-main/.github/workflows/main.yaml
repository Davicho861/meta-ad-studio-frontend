name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Usar la versión LTS de Node.js

      - name: Install Dependencies (Frontend)
        run: npm ci # Usa npm ci para instalaciones limpias y consistentes

      - name: Install Dependencies (Backend)
        run: cd server && npm ci

      - name: Run Linter (Frontend)
        run: npm run lint

      - name: Run Linter (Backend)
        run: cd server && npm run lint # Asumiendo que hay un script lint en el backend

      - name: Run Unit and Integration Tests (Frontend)
        run: npm test

      - name: Run Unit and Integration Tests (Backend)
        run: cd server && npm test # Asumiendo que hay un script test en el backend

      - name: Build Project for Production (Frontend)
        run: npm run build

      - name: Build Project for Production (Backend)
        run: cd server && npm run build # Asumiendo que hay un script build en el backend

      # Opcional: Paso de despliegue
      # Este es un placeholder para el despliegue.
      # Puedes configurar el despliegue a servicios como Vercel, Netlify o Google Cloud Run aquí.
      # Ejemplo para Vercel:
      # - name: Deploy to Vercel
      #   if: github.ref == 'refs/heads/main'
      #   run: npx vercel deploy --prod --token ${{ secrets.VERCEL_TOKEN }}
      #   env:
      #     VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      #     VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      # Ejemplo para Netlify:
      # - name: Deploy to Netlify
      #   if: github.ref == 'refs/heads/main'
      #   run: npx netlify deploy --prod --dir=dist # Asume que tu build output está en 'dist'
      #   env:
      #     NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      #     NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      # Ejemplo para Google Cloud Run (requiere configuración de gcloud CLI y autenticación):
      # - name: Authenticate to Google Cloud
      #   uses: google-github-actions/auth@v1
      #   with:
      #     credentials_json: ${{ secrets.GCP_SA_KEY }}
      # - name: Set up Google Cloud SDK
      #   uses: google-github-actions/setup-gcloud@v1
      # - name: Build and Deploy to Cloud Run
      #   run: |
      #     gcloud builds submit --tag gcr.io/your-project-id/meta-studio-flow-backend --project your-project-id server/
      #     gcloud run deploy meta-studio-flow-backend --image gcr.io/your-project-id/meta-studio-flow-backend --platform managed --region us-central1 --allow-unauthenticated --project your-project-id
      #     # Repetir para el frontend si es necesario