generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Issue {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String
  status      String
  priority    String
  dueDate     DateTime?
  createdBy   User     @relation("IssuesCreatedByUser", fields: [createdById], references: [id])
  createdById String
  sprintId    String?
  sprint      Sprint?  @relation("SprintIssues", fields: [sprintId], references: [id])
  projectId   String?
  project     Project? @relation("ProjectIssues", fields: [projectId], references: [id])
}

model Sprint {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  startDate DateTime
  endDate   DateTime
  issues    Issue[]  @relation("SprintIssues")
  projectId String
  project   Project  @relation("ProjectSprints", fields: [projectId], references: [id])
  createdById String
  createdBy   User     @relation("CreatedSprints", fields: [createdById], references: [id])
}

model Project {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String
  issues      Issue[]  @relation("ProjectIssues")
  sprints     Sprint[] @relation("ProjectSprints")
  teamMembers User[]   @relation("ProjectTeamMembers")
  createdById String
  createdBy   User     @relation("CreatedProjects", fields: [createdById], references: [id])
}

model User {
  id           String    @id @default(uuid())
  firebaseId   String    @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  email        String    @unique
  password     String
  name         String?
  issues       Issue[]   @relation("IssuesCreatedByUser")
  projects     Project[] @relation("CreatedProjects")
  sprints      Sprint[]  @relation("CreatedSprints")
  teamProjects Project[] @relation("ProjectTeamMembers")
  teams        Team[]    @relation("TeamMembersOnTeams")
  role         Role          @default(USER)
  videos       Video[]
  brandProfile BrandProfile?
}

model BrandProfile {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  brandName   String
  logoUrl     String?
  brandColors String[]
  slogan      String?
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
}

model Team {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  members   User[]   @relation("TeamMembersOnTeams")
}

model Video {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  imageUrl    String    // URL of the input image
  status      String    // e.g., "processing", "completed", "failed"
  videoUrl    String?   // URL of the generated video
  replicateId String?   @unique // ID from Replicate API
  webhookUrl  String?   // Webhook URL provided to Replicate
  error       String?   // Error message if generation fails
  userId      String?
  user        User?     @relation(fields: [userId], references: [id])
}
