version: '3.8'

services:
  frontend:
    # Frontend dev with hot-reload using devtools/frontend.Dockerfile.dev
    build:
      context: .
      dockerfile: devtools/frontend.Dockerfile.dev
    volumes:
      - ./frontend:/app:cached
      - /app/node_modules
    working_dir: /app
    env_file:
      - ./.env.development
    command: sh -c "npm install --silent || true && npm run dev -- --host"
    ports:
      - "5173:5173"
    environment:
      - NODE_ENV=development
    stdin_open: true
    tty: true

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/app/backend:cached
      - /app/backend/node_modules
    working_dir: /app/backend
    env_file:
      - ./.env.development
    # Ensure dev experience: install (if needed), generate prisma client and run dev server
    command: sh -c "npm install --silent || true && npx prisma generate || true && npm run dev"
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=development
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  db:
    image: postgres:15
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    image: redis:7
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

volumes:
  pgdata:

